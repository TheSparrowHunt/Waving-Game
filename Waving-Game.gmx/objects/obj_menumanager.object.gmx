<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menuposition = 0;
menusize = 3;

if(audio_is_playing(snd_game_music)){
    audio_stop_sound(snd_game_music);
}

if (!audio_is_playing(snd_menu_music)){
    audio_play_sound(snd_menu_music, 1, true);
}

//alarm[0] = 7;

counter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!audio_is_playing(snd_menu_music)){
    audio_play_sound(snd_menu_music, 1, true);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.menudown == 1){
    if (menuposition &lt; menusize){
        menuposition++;
    }
    else{
        menuposition = 0;
    }
}
else if (global.menuup == 1){
    if (menuposition &gt; 0){
        menuposition--;
    }
    else{
        menuposition = 3;
    }
}

if (global.btnConfirmPressed == 1 &amp;&amp; counter &gt; 2){
    switch(menuposition){
        case 0: room_goto(room0); break;
        case 1: room_goto(howto); break;
        case 2: room_goto(settings); break;
        case 3: game_end(); break;
    }
}

/*if(audio_is_playing(snd_game_music) &amp;&amp; audio_sound_get_gain(snd_game_music) &lt;= 0){
    audio_stop_sound(snd_game_music);
}*/

counter++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(global.Font0);

draw_set_halign(fa_center);
//top
if (menuposition == 0){
    draw_text_colour(room_width/2, (room_height/2)+5, "start", global.white, global.white, global.white, global.white, 1);
}
else{
    draw_text_colour(room_width/2, (room_height/2)+5, "start", global.white, global.white, global.white, global.white, 0.3);
}

if (menuposition == 1){
    draw_text_colour(room_width/2, (room_height/2)+16, "how to play", global.white, global.white, global.white, global.white, 1);
}
else{
    draw_text_colour(room_width/2, (room_height/2)+16, "how to play", global.white, global.white, global.white, global.white, 0.3);
}

if (menuposition == 2){
    draw_text_colour(room_width/2, (room_height/2)+27, "settings", global.white, global.white, global.white, global.white, 1);
}
else{
    draw_text_colour(room_width/2, (room_height/2)+27, "settings", global.white, global.white, global.white, global.white, 0.3);
}

if (menuposition == 3){
    draw_text_colour(room_width/2, (room_height/2)+38, "exit", global.white, global.white, global.white, global.white, 1);
}
else{
    draw_text_colour(room_width/2, (room_height/2)+38, "exit", global.white, global.white, global.white, global.white, 0.3);
}

draw_text_colour(room_width/2, room_height-21, "a global game jam 2017 game", global.white, global.white, global.white, global.white, 1);
draw_text_colour(room_width/2, room_height-10, "Alice Casey - @Fir3sparkle and Jake Sparrow-Hunter - @TheSparrowHunt", global.white, global.white, global.white, global.white, 1);

draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
