<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shakelevel = 0;

winningmapped = 0;
oldwinningmapped = 0;

bottomofbar = room_height-40;
topofbar = 40;
leftofbar = (room_width/2)+(room_width/3)+30;
rightofbar = (room_width/2)+(room_width/3)+40;

for ( i = 0; i &lt; 30; i++){
    previousscore[i] = 0;
}

global.curtains = 0;

if(audio_is_playing(snd_menu_music)){
    audio_sound_gain(snd_menu_music, 0, 10);
}

if (!audio_is_playing(snd_game_music)){
    audio_play_sound(snd_game_music, 1, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>percentageWinning = global.levelscore/global.winthreshold;
if (global.gamestate != 2){
   if (percentageWinning &lt; 0.75){
        percentageWinning = 0;
    }
    shakevalue = random(percentageWinning)-(0.5*percentageWinning);
    view_angle[0] = round(shakevalue*3);
}
else{
    view_angle[0] = 0;
}

if (global.gamestate != 2){
    if (global.levelscore &gt;= global.winthreshold){
        global.gamestate = 2;
    }
}
else{

    if (instance_number(obj_win) &lt; 1){
        instance_create(room_width/2, room_height/2, obj_win);
    }
    //TODO
    if (global.btnConfirmPressed == 1){
        global.curtains = 1;
        
    }
}

/*if (curtainsmoved == 0){
    if (curtainleftx &lt; room_width/2){
        curtainleftx -= 1;
        curtainrightx += 1;
    }
    else{
        curtainsmoved = 1;
    }
}
else{
    if (global.gamestate == 2){
        if (instance_number(obj_win) &lt; 1){
            instance_create(room_width/2, room_height/2, obj_win);
            }
        if (curtainleftx &gt; 0){
            curtainleftx += 1;
            curtainrightx -= 1;
        }
        else{
            //TODO
            if (global.btnConfirmPressed == 1){
                switch(room_get_name(room)){
                    case "room0" : room_goto(room1); break;
                    case "room1" : room_goto(room0); break;
                }
            }
        }
    }
}*/

for ( i = 0; i &lt; 30; i++){
    if (i == 0){
        previousscore[0] = global.levelscore;
    }
    else{
        previousscore[i] = 0;
    }
    
}

if(audio_is_playing(snd_menu_music) &amp;&amp; audio_sound_get_gain(snd_menu_music) &lt;= 0){
    audio_stop_sound(snd_menu_music);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>winningmapped = round(100*global.levelscore/global.winthreshold);
oldwinningmapped = round(100*previousscore[29]/global.winthreshold);

if (global.winning == -1){
    draw_set_colour(global.red)
}
else if (global.winning == 0){
    draw_set_colour(global.yellow);
}
else{
    draw_set_colour(global.green);
}


draw_rectangle(leftofbar, bottomofbar-winningmapped, rightofbar, bottomofbar, false);


    
draw_set_colour(global.blue)
    
    draw_rectangle(leftofbar, topofbar, rightofbar, bottomofbar, true);

//draw_sprite(spr_curtainleft, 0, curtainleftx, 0);
//draw_sprite(spr_curtainright, 0, curtainrightx, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
