<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>size = 0;
maxsize = 145;
wobbler = 0.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xpos = 0;
ypos = 0;
xposprevious = 0;
yposprevious = 0;

for(i = 0; i &lt; 90; i+= 5){
    xpos = -sin(degtorad(i))*size;
    ypos = -cos(degtorad(i))*size;
    xposprevious = -sin(degtorad(i-5))*size;
    yposprevious = -cos(degtorad(i-5))*size;
    if (i &lt; 90-(0.5*(global.range)) &amp;&amp; i &gt; (0.5*global.range)){
        draw_line_colour(x+xpos, y+ypos, x+xposprevious, y+yposprevious, global.yellow, global.yellow);
        draw_line_colour(x+xpos+1, y+ypos, x+xposprevious+1, y+yposprevious, global.yellow, global.yellow);
        draw_line_colour(x+xpos-1, y+ypos, x+xposprevious-1, y+yposprevious, global.yellow, global.yellow);
        draw_line_colour(x+xpos, y+ypos+1, x+xposprevious, y+yposprevious+1, global.yellow, global.yellow);
        draw_line_colour(x+xpos, y+ypos-1, x+xposprevious, y+yposprevious-1, global.yellow, global.yellow);
        draw_line_colour(x+xpos+1, y+ypos+1, x+xposprevious+1, y+yposprevious+1, global.yellow, global.yellow);
        draw_line_colour(x+xpos-1, y+ypos-1, x+xposprevious-1, y+yposprevious-1, global.yellow, global.yellow);
    }
    else{
        draw_line_colour(x+xpos, y+ypos, x+xposprevious, y+yposprevious, global.red, global.red);
        draw_line_colour(x+xpos+1, y+ypos, x+xposprevious+1, y+yposprevious, global.red, global.red);
        draw_line_colour(x+xpos-1, y+ypos, x+xposprevious-1, y+yposprevious, global.red, global.red);
        draw_line_colour(x+xpos, y+ypos+1, x+xposprevious, y+yposprevious+1, global.red, global.red);
        draw_line_colour(x+xpos, y+ypos-1, x+xposprevious, y+yposprevious-1, global.red, global.red);
        draw_line_colour(x+xpos+1, y+ypos+1, x+xposprevious+1, y+yposprevious+1, global.red, global.red);
        draw_line_colour(x+xpos-1, y+ypos-1, x+xposprevious-1, y+yposprevious-1, global.red, global.red);
    }
}

if (size &lt; maxsize-5){
    size+= 2.5;
}
else {

    if(size &lt;= maxsize-5 || size &gt;= maxsize+5){
        wobbler = -wobbler;
    }
    size+= wobbler;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
